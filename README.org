

#+TITLE: My Emacs Config
#+AUTHOR: SHENK
#+DESCRIPTION: Agustin Frenkel personal emcas config
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle init.el

* First Things to load

** paths cofing

#+begin_src emacs-lisp :tangle early-init.el

    ;; Si prefieres forzar manualmente:
    (setq running-os "windows")

    ;; 2. Asignar user-emacs-directory y user-config-directory
    (cond
     ((string= running-os "linux")
      (setq user-emacs-directory   "~/.local/share/emacs/"
            user-config-directory  "~/.config/emacs/"))
     ((string= running-os "windows")
      ;; aquí usamos USERPROFILE, pero puedes usar APPDATA si prefieres:
      (setq user-emacs-directory   "~/.config/emacs/"
            user-config-directory "~/.emacs.d/"
            org-wiki-directory "C:\\Users\\agust\\Nextcloud\\org_roam_wiki"))
     (t
      (error "running-os debe ser 'linux o 'windows; valor actual: %s" running-os)))

#+end_src
** seteo de resto de variables
#+begin_src emacs-lisp :tangle early-init.el
  (setq-default startup-redirect-eln-cache user-emacs-directory)
  (setq-default create-lockfiles nil)
  (setq-default make-backup-files nil)
  (setq-default backup-inhibited t)
  (setq-default auto-save-list-file-prefix (file-name-concat user-emacs-directory "auto-saves/.saves-"))
  (setq-default custom-file (file-name-concat user-emacs-directory "custom-file"))
  (setq-default package-user-dir (file-name-concat user-emacs-directory "elpa"))
  (setq-default url-history-file (file-name-concat user-emacs-directory "url/history"))
  (setq-default lock-file-name-transforms `(("^\\(.*\\)$" "/tmp/\\1") t))
  (setq-default auto-save-default nil)
  (setq-default custom-theme-directory (file-name-concat user-emacs-directory "custom-themes"))
  (setq-default pgtk-wait-for-event-timeout 0)
#+end_src
* Settings

** Setup
Here we setup the `package-archives` variable to include the [[https://melpa.org][MELPA]]
repository.
#+begin_src emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (require 'use-package)
#+end_src
** user interface
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode t)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  ;; (set-face-attribute 'default nil
  ;;                     :font "Berkeley Mono-13")
  ;; (set-face-attribute 'variable-pitch nil
  ;;                     :font "Ubuntu-13")
#+end_src
** Behavioral Settings
How I prefer emacs to behavior.
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-startup-screen t)
  (delete-selection-mode t)
  (electric-pair-mode t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode t)
  (setq c-default-style "stroustrup")
  (xterm-mouse-mode t)
  (setq native-comp-async-report-warnings-errors nil)
  (context-menu-mode t)
  (setq mouse-drag-and-drop-region-cross-program t)
#+end_src
*** avoid beeping
#+begin_src emacs-lisp
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
#+end_src
*** insert spaces in minibuffer
#+begin_src emacs-lisp
  (define-key minibuffer-local-completion-map (kbd "SPC") nil)
#+end_src
*** disable C-z suspending Emacs
#+begin_src emacs-lisp
  (when (display-graphic-p)
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z")))
#+end_src
** ShortCuts
*** Save all C-x S
#+begin_src emacs-lisp
(defun my/save-all ()
    "Save all buffers without prompt."
    (interactive)
    (let ((modified-count
           (length (cl-loop for buf in (buffer-list)
                            when (and (buffer-file-name buf) (buffer-modified-p buf))
                            collect buf))))
        (save-excursion
            (save-some-buffers t)
            (message "%d buffer(s) saved" modified-count))))
;;(global-set-key (kbd "C-x v d") 'my/save-all)
#+end_src
*** fecha
#+begin_src emacs-lisp
(defun insertar-rutina-diaria (fecha-input)
  "Inserta una rutina diaria con la fecha especificada, o pide una si no se proporciona."
  (interactive (list (read-string "Ingrese la fecha (formato AAAA-MM-DD): ")))
  (let* ((fecha (parse-time-string fecha-input))
         (anio (nth 5 fecha))
         (mes (nth 4 fecha))
         (dia (nth 3 fecha))
         (fecha-formateada (encode-time 0 0 0 dia mes anio))
         (dia-semana (format-time-string "%A" fecha-formateada))
         (dia-semana-es (translate-day-to-spanish dia-semana)))
    (insert (format "*** %s, %s [/]\n" fecha-input dia-semana-es))
    (insert "- [ ] Lavarse la cara a la mañana\n")
    (insert "- [ ] Lavarse la cara a la tarde\n")
    (insert "- [ ] Protector solar a la mañana\n")
    (insert "- [ ] Protector solar a la tarde\n")))

(defun translate-day-to-spanish (day)
  "Traduce el día de la semana del inglés al español."
  (cond ((string= day "Monday") "Lunes")
        ((string= day "Tuesday") "Martes")
        ((string= day "Wednesday") "Miércoles")
        ((string= day "Thursday") "Jueves")
        ((string= day "Friday") "Viernes")
        ((string= day "Saturday") "Sábado")
        ((string= day "Sunday") "Domingo")
        (t day))) ; Por defecto, devuelve el día como está si no coincide.

(defun buscar-e-insertar-rutina-con-siguiente-fecha ()
  "Busca la fecha más reciente en formato AAAA-MM-DD hacia arriba y llama a insertar-rutina-diaria con la siguiente fecha en la posición actual del cursor."
  (interactive)
  (let ((fecha-regex "\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}\\)")
        fecha-siguiente-str)
    (save-excursion
      (if (re-search-backward fecha-regex nil t)
          (let* ((fecha-str (match-string 1))
                 (fecha (parse-time-string fecha-str))
                 (anio (nth 5 fecha))
                 (mes (nth 4 fecha))
                 (dia (nth 3 fecha))
                 (fecha-siguiente (encode-time 0 0 0 (1+ dia) mes anio)))
            (setq fecha-siguiente-str (format-time-string "%Y-%m-%d" fecha-siguiente)))
        (message "No se encontró ninguna fecha hacia arriba.")))
    (when fecha-siguiente-str
      (insertar-rutina-diaria fecha-siguiente-str))))

(global-set-key (kbd "C-c n d") 'insertar-rutina-diaria)
(global-set-key (kbd "C-c n n") 'buscar-e-insertar-rutina-con-siguiente-fecha)

#+end_src


* Smooth Scrolling
Make emacs scroll smoothly with a mouse, touchpad, and scroll keys.
#+begin_src emacs-lisp
  (setq-default scroll-conservatively 10000)
  (setq-default scroll-margin 0)

  (setq pixel-scroll-precision-use-momentum t)
  (setq pixel-scroll-precision-interpolate-mice t)
  (setq pixel-scroll-precision-large-scroll-height 10.0)
  (setq pixel-scroll-precision-interpolate-page t)
  (pixel-scroll-precision-mode t)

  (global-set-key (kbd "C-v") 'pixel-scroll-interpolate-down)
  (global-set-key (kbd "M-v") 'pixel-scroll-interpolate-up)
#+end_src

Define custom functions to scroll only half a page up or down
#+begin_src emacs-lisp
  (defun pixel-scroll-interpolate-half-down ()
    (interactive)
    (pixel-scroll-precision-interpolate (/ (- (window-text-height nil t)) 2) nil 1))

  (defun pixel-scroll-interpolate-half-up ()
    (interactive)
    (pixel-scroll-precision-interpolate (/ (window-text-height nil t) 2) nil 1))

  (global-set-key (kbd "C-v") 'pixel-scroll-interpolate-half-down)
  (global-set-key (kbd "M-v") 'pixel-scroll-interpolate-half-up)
#+end_src

* Packages
** wich-key
#+begin_src emacs-lisp
  (use-package which-key
  :ensure t
  :custom
  (which-key-idle-delay 0.2)
  (setq which-key-popup-type 'minibuffer)
  :config
  (which-key-mode))
#+end_src
** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src

** Corfu
Corfu provides a quick popup that displays completion candidates for
whatever it is you're currently typing. It can also show documentation
next to the completions buffer for the symbol you're currently
selecting. Goes well with [[Orderless]].
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-auto t)
    (corfu-auto-delay 0.2)
    (corfu-auto-prefix 0)
    (corfu-min-width 60)
    (corfu-popupinfo-delay 0.5)
    (corfu-preview-current nil)
    (corfu-preselect 'prompt)
    (corfu-quit-no-match t)
    (corfu-on-exact-match 'quit)
    (corfu-cycle t)
    :config
    (corfu-popupinfo-mode)
    (global-corfu-mode))
#+end_src
*** Keybinds
Corfu by default sets up the =corfu-keymap= variable which overrides
some common keybindings. I found the defaults to be obtrusive. I
defined my own keybinds. I want the completion to appear as quickly as
possible, but I don't want it to be in the way of my typing. So, I
have bound a separate set of keys to scroll the popup, since otherwise
I would be stuck scrolling the popup when I actually wanted to scroll
the document I'm working with. I have also defined custom functions
for =TAB= and =RETURN=. =TAB= should always complete either the first
completion candidate, or any other explicitly selected
candidate. =RETURN= will only autocomplete if a candidate has been
explicitly selected. This allows me to insert a newline with =RETURN=
even if the popup is present.
#+begin_src emacs-lisp
  (defun corfu-handle-tab-completion ()
    (interactive)
    (if (>= corfu--index 0)
        (corfu-complete)
      (progn
        (setq corfu--index 0)
        (corfu-complete))))

  (defun corfu-handle-return-completion ()
    (interactive)
    (if (>= corfu--index 0)
        (corfu-complete)
      (newline)))

  (setq corfu-map (make-sparse-keymap))
  (define-key corfu-map (kbd "M-n") 'corfu-next)
  (define-key corfu-map (kbd "M-p") 'corfu-previous)
  (define-key corfu-map (kbd "TAB") 'corfu-handle-tab-completion)
  (define-key corfu-map (kbd "RET") 'corfu-handle-return-completion)
  (define-key corfu-map (kbd "M-SPC") 'corfu-insert-separator)
#+end_src
** Org
*** Org Roam
#+begin_src emacs-lisp
  (defvar zettelkasten-paths-alist nil
  "Alist of named Zettelkasten root directories.")

  (setq zettelkasten-paths-alist
      (list
       (cons "Main"  org-wiki-directory)
       (cons "NesWiki" "C:/Users/agust/Nextcloud/org_roam_wiki")))

  (defun switch-zettelkasten ()
    (interactive)
    (let* ((keys (mapcar #'car zettelkasten-paths-alist))
           (prompt (format "Select Zettelkasten:"))
           (key (completing-read prompt keys))
           (chosen-zettelkasten-path (cdr (assoc key zettelkasten-paths-alist))))
      (setq org-roam-directory chosen-zettelkasten-path)
      (setq org-roam-db-location (file-name-concat chosen-zettelkasten-path "org-roam.db"))
      (org-roam-db-sync)))

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (cdr (assoc-string "Main" zettelkasten-paths-alist)))
    (org-roam-db-location (file-name-concat (cdr (assoc-string "Main" zettelkasten-paths-alist)) "org-roam.db"))
    (org-roam-capture-templates '(("d" "default" plain "%?"
                                    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                       "#+title: ${title}\n#+filetags: :Unfinished:")
                                    :unnarrowed t)))
    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n s" . switch-zettelkasten)
     (:map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n t" . org-roam-tag-add)
            ("C-c n a" . org-roam-alias-add)
            ("C-c n b" . org-roam-buffer-toggle))))
    :config
    (org-roam-db-autosync-mode t))

  (use-package org-roam-ui
    :ensure t
    :custom
    (org-roam-ui-open-on-start nil)
    (org-roam-ui-sync-theme nil))
#+end_src
*** Orgperstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :custom
    (org-superstar-item-bullet-alist '((42 . 8226)
                                       (43 . 8226)
                                       (45 . 8211)))
    :config
    (add-hook 'org-mode-hook 'org-superstar-mode)
    (org-superstar-mode t))
#+end_src
*** Org Fragtog
Org Fragtog allows me to seamlessly edit latex previews in org
documents whenever the point is over them.
#+begin_src emacs-lisp
  (use-package org-fragtog
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src
*** Org Mode
#+begin_src emacs-lisp
  (require 'org-agenda)
  (require 'org-tempo)
  (setq org-startup-indented t)
  (setq org-pretty-entities t)
  (setq org-hide-emphasis-markers t)
  (setq org-startup-with-inline-images t)
  (setq org-preview-latex-default-process 'dvisvgm)
  (setq org-preview-latex-image-directory "~/.cache/ltximg")
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
  (setq org-startup-with-latex-preview t)
  (add-hook 'org-mode-hook 'auto-fill-mode)
  ;(add-hook 'org-mode-hook 'flyspell-mode)

  ;; (org-block :background ,BACKGROUND_2 :extend t)
  ;; (org-block-begin-line :background ,BACKGROUND_2
  ;;                       :foreground ,COMMENT
  ;;                       :slant italic
  ;;                       :extend t)
  ;; (org-block-end-line :background ,BACKGROUND_2
  ;;                     :foreground ,COMMENT
  ;;                     :slant italic
  ;;                     :extend t)
  ;; (org-hide :foreground ,COMMENT)
 #+end_src
**** Org mode headings colors and indentation
#+begin_src emacs-lisp
  (set-face-attribute
   'org-level-1 nil :height 1.5 :weight 'bold)
  (set-face-attribute 'org-level-2 nil :height 1.3 :weight 'bold)
  (set-face-attribute 'org-level-3 nil :height 1.1 :weight 'bold)
  (set-face-attribute 'org-level-4 nil :weight 'normal)
  (set-face-attribute 'org-level-5 nil :weight 'normal)
  (set-face-attribute 'org-level-6 nil :weight 'normal)
  (set-face-attribute 'org-level-7 nil :weight 'normal)
  (set-face-attribute 'org-level-8 nil :weight 'normal)
#+end_src
*** Org Agenda
#+begin_src emacs-lisp
(setq org-agenda-files
      '("C:\\Users\\agust\\Nextcloud\\org_roam_wiki\\agenda.org"))
 #+end_src
*** Org tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
*** Org encryption
#+begin_src emacs-lisp
  (require 'epa-file)
  (epa-file-enable)
  (setq epa-file-select-keys nil)
  (setq epa-file-encrypt-to nil)
#+end_src
*** TODO My daily tracker


** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :after all-the-icons
    :custom
    (dashboard-set-file-icons t)
    (dashboard-set-heading-icons t)
    (dashboard-banner-logo-title "ShenkMacs")
    (dashboard-center-content t)
    (dashboard-show-shortcuts t)
    (dashboard-projects-backend 'project-el)
    (dashboard-items '((recents . 5) (projects . 5) (bookmarks . 5)))
    (dashboard-startup-banner (concat user-config-directory "shenk.png"))
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `((( ""
       "Emacs Config"
       "Open the Emacs config file"
       ,(lambda (&rest _)
           (interactive)
           (find-file
            (expand-file-name "README.org" user-config-directory)))))))
    (dashboard-projects-switch-function 'project-open)
    :config
    (dashboard-setup-startup-hook))
#+end_src
** Vertico
Vertico provides a performant and minimalistic vertical completion UI
based on the default completion system. It makes it really easy to
search for functions or variables in the minibuffer. Goes well with
[[Orderless]].
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode)
    (vertico-mouse-mode))
#+end_src

** theme
#+begin_src emacs-lisp
  (use-package dracula-theme
  :ensure t
  :config
  (load-theme 'dracula t))
#+end_src
** Orderless
This package provides an orderless completion style that divides the
pattern into space-separated components, and matches candidates that
match all of the components in any order. Each component can match in
any one of several ways: literally, as a regexp, as an initialism, in
the flex style, or as multiple word prefixes. By default, regexp and
literal matches are enabled.
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :custom
    (eglot-autoshutdown t)
    (eglot-sync-connect 0) ; performance
    (eglot-events-buffer-size 0) ; performance
    :config
    (fset #'jsonrpc--log-event #'ignore) ; performance
    (add-hook 'prog-mode-hook 'eglot-ensure)
    (add-hook 'focus-out-hook 'garbage-collect) ; performance
    (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
    (global-set-key (kbd "C-c d") 'xref-find-definitions)
    (global-set-key (kbd "C-c h") 'eldoc)
    (global-set-key (kbd "C-c b") 'xref-go-back)
    (global-set-key (kbd "C-c R") 'xref-find-references))
#+end_src

** Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :hook (prog-mode . tree-sitter-hl-mode))
#+end_src
